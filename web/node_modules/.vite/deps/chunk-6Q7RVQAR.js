import {
  A,
  L,
  dn,
  yn
} from "./chunk-HHGCX6LU.js";
import {
  u
} from "./chunk-X3RDTKHU.js";
import {
  q
} from "./chunk-6LM2TIB4.js";
import {
  b
} from "./chunk-37DX2TVE.js";

// node_modules/.pnpm/@radix-ui+react-compose-refs@1.1.0_react@18.3.1/node_modules/@radix-ui/react-compose-refs/dist/index.mjs
function setRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref !== null && ref !== void 0) {
    ref.current = value;
  }
}
function composeRefs(...refs) {
  return (node) => refs.forEach((ref) => setRef(ref, node));
}
function useComposedRefs(...refs) {
  return q(composeRefs(...refs), refs);
}

// node_modules/.pnpm/@radix-ui+react-slot@1.1.0_react@18.3.1/node_modules/@radix-ui/react-slot/dist/index.mjs
var Slot = A((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  const childrenArray = L.toArray(children);
  const slottable = childrenArray.find(isSlottable);
  if (slottable) {
    const newElement = slottable.props.children;
    const newChildren = childrenArray.map((child) => {
      if (child === slottable) {
        if (L.count(newElement) > 1) return L.only(null);
        return dn(newElement) ? newElement.props.children : null;
      } else {
        return child;
      }
    });
    return u(SlotClone, { ...slotProps, ref: forwardedRef, children: dn(newElement) ? yn(newElement, void 0, newChildren) : null });
  }
  return u(SlotClone, { ...slotProps, ref: forwardedRef, children });
});
Slot.displayName = "Slot";
var SlotClone = A((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  if (dn(children)) {
    const childrenRef = getElementRef(children);
    return yn(children, {
      ...mergeProps(slotProps, children.props),
      // @ts-ignore
      ref: forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef
    });
  }
  return L.count(children) > 1 ? L.only(null) : null;
});
SlotClone.displayName = "SlotClone";
var Slottable = ({ children }) => {
  return u(b, { children });
};
function isSlottable(child) {
  return dn(child) && child.type === Slottable;
}
function mergeProps(slotProps, childProps) {
  const overrideProps = { ...childProps };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler) {
      if (slotPropValue && childPropValue) {
        overrideProps[propName] = (...args) => {
          childPropValue(...args);
          slotPropValue(...args);
        };
      } else if (slotPropValue) {
        overrideProps[propName] = slotPropValue;
      }
    } else if (propName === "style") {
      overrideProps[propName] = { ...slotPropValue, ...childPropValue };
    } else if (propName === "className") {
      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(" ");
    }
  }
  return { ...slotProps, ...overrideProps };
}
function getElementRef(element) {
  var _a, _b;
  let getter = (_a = Object.getOwnPropertyDescriptor(element.props, "ref")) == null ? void 0 : _a.get;
  let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.ref;
  }
  getter = (_b = Object.getOwnPropertyDescriptor(element, "ref")) == null ? void 0 : _b.get;
  mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.props.ref;
  }
  return element.props.ref || element.ref;
}
var Root = Slot;

export {
  useComposedRefs,
  Slot,
  Slottable,
  Root
};
//# sourceMappingURL=chunk-6Q7RVQAR.js.map
